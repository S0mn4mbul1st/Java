package LAB3;

import java.util.*;

interface IList<E> extends Iterable<E> {
	boolean add(E e); // qdd element to the end of list
	void add(int index, E element) throws NoSuchElementException; // add element on position index
	void clear(); // delete all elements
	boolean contains(E element); // is list containing an element (equals())
	E get(int index) throws NoSuchElementException; //get element from position
	E set(int index, E element) throws NoSuchElementException; // set new value on position
	int indexOf(E element); // where is element (equals())
	boolean isEmpty(); 
	Iterator<E> iterator();
	ListIterator<E> listIterator() throws UnsupportedOperationException; // for ListIterator
	E remove(int index) throws NoSuchElementException; // remove element from position index
	boolean remove(E e); // remove element
	int size();
}

class TwoWayLinkedListWithHead<E> implements IList<E>{
	
	Element head;
	// can be realization with the field size or without
	int size=0;
	
	private class Element
	{
		public Element(E e) 
		{
			this.object=e;
		}
		public Element(E e, Element next, Element prev) 
		{
			this.object=e;
			this.next=next;
			this.prev=prev;
		}
		public Element getNext() 
		{
			return next;
		}
		public Element getPrev()
		{
			return prev;
		}
		public E getValue()
		{
			return object;
		}
		public void setNext(Element next) 
		{
			 this.next = next;
		}
		public void setPrev (Element prev)
		{
			this.prev=prev;
		}
		public void setValue(E object) 
		{
			 this.object = object;
		}
		
		E object;
		Element next=null;
		Element prev=null;
	}
		
	private class InnerIterator implements Iterator<E>
	{
		Element pos;
		// TODO maybe more fields....
		
		public InnerIterator() {
			pos=head;
		}
		@Override
		public boolean hasNext() {
			return pos.getNext()!=null;
		}
		
		@Override
		public E next() {
			pos=pos.getNext();
			return pos.getValue();
		}
		
		public Element getCurrent ()
		{
			return pos;
		}
	}
	
	private class InnerListIterator implements ListIterator<E>{
		Element p;
		// TODO maybe more fields....

		public InnerListIterator() {
			p=head;
		}
		
		public Element getCurrent()
		{
			return p;
		}
		public void add(E e) {
			throw new UnsupportedOperationException();
		}

		@Override
		public boolean hasNext() {
			return p.getNext()!=null;
		}

		@Override
		public boolean hasPrevious() {
			return p.getPrev()!=null;
		}

		@Override
		public E next() {
			p=p.getNext();
			return p.getValue();
		}

		@Override
		public int nextIndex() {
			throw new UnsupportedOperationException();
		}

		@Override
		public E previous() {
			p=p.getPrev();
			return p.getValue();
		}

		@Override
		public int previousIndex() {
			throw new UnsupportedOperationException();
		}

		@Override
		public void remove() {
			throw new UnsupportedOperationException();
		}

		@Override
		public void set(E e) {
			throw new UnsupportedOperationException();
		}
	}
	
	public TwoWayLinkedListWithHead() {	
		head=new Element(null);
	}
	
	@Override
	public boolean add(E e) {
		InnerIterator iter=new InnerIterator();
		Element obj= new Element(e);
		if (head.getNext()==null)
		{
			head.setNext(obj);
			head.setPrev(obj);
			size=1;
			return true;
		}
		else
		{
			while (iter.hasNext())
			{
				iter.next();
			}
			size++;
			iter.getCurrent().setNext(obj);
			obj.setPrev(iter.getCurrent());
			obj.setNext(null);
			head.setPrev(obj);
			return true;
		}
	}

	@Override
	public void add(int index, E e) 
	{
		InnerIterator iter=new InnerIterator();
		Element obj= new Element(e);
		if (index>size)
		{
			throw new NoSuchElementException();
		}
		if (isEmpty() || index==size)
		{
			add(e);
		}
		else
		{
			int count=0;
			iter.next();
			Element temp=new Element (e);
			if (index==0)
			{
				temp=iter.getCurrent();
				obj.setNext(temp);
				obj.setPrev(head);
				head.setNext(obj);
				size++;
			}
			else
			{
				while (iter.hasNext())
				{
					if (count==index-1)
					{
						temp=iter.getCurrent();
						iter.next();
						Element item=iter.getCurrent();
						temp.setNext(obj);
						obj.setPrev(temp);
						obj.setNext(item);
						item.setPrev(obj);
						size++;
						break;
					}
					else
					{
						iter.next();
						count++;
					}	
				}
			}
		}	
	}
	
	@Override
	public E remove(int index) 
	{
		InnerListIterator iter=new InnerListIterator();
		E e = null;
		int count=0;
		if ((index==0 && size==1))
		{
			e=iter.next();
			clear();
			size=0;
			return e;
		}
		else
		{
			while (iter.hasNext()) 
			{
				if (index==0)
				{
						e=iter.next();
						iter.next();
						head.setNext(iter.getCurrent());
						iter.getCurrent().setPrev(head);
						size--;
						return e;
				}	
				if (count==index)
				{
					if ((index+1)==size())
					{
						iter.next();
						e=iter.getCurrent().getValue();
						iter.previous();
						iter.getCurrent().setNext(null);
						size--;
						return e;
					}
					else
					{
						Element temp=iter.getCurrent();
						e=iter.next();
						iter.next();
						temp.setNext(iter.getCurrent());
						iter.getCurrent().setPrev(temp);
						size--;
						return e;
					}
				}
				else
				{
					iter.next();
					count++;
				}
			}
		}
		throw new NoSuchElementException();
	}

	@Override
	public boolean remove(E e) 
	{
		boolean done=false;
		if (contains(e))
		{
			remove (indexOf(e));
			done=true;
		}
		return done;
	}

	@Override
	public void clear() {
		head.setNext(null);
		size=0;
	}

	@Override
	public boolean contains(E element) {
		InnerIterator iter=new InnerIterator();
		while (iter.hasNext())
		{
		    if (iter.next().equals(element))
		    {
		    	return true;
		    }
		}
		return false;
	}

	@Override
	public E get(int index) 
	{
		InnerIterator iter=new InnerIterator();
		E e = null;
		int count=0;
		if (size!=0)
		{
		if (index==0)
		{
			e=head.getNext().getValue();
			return e;
		}
		else
		{
			while (iter.hasNext()) 
			{
				if (count==index)
				{
					e=iter.next();
					return e;
				}
				else
				{
					iter.next();
				}
				count++;
			}
		}
		}
		throw new NoSuchElementException();
	}

	@Override
	public E set(int index, E element) 
	{
		InnerIterator iter=new InnerIterator();
		E e = null;
		int count=0;
		if (index<size)
		{
		while (iter.hasNext()) 
		{
			if (count==index)
			{
				e=iter.next();
				iter.getCurrent().setValue(element);
				return e;
			}
			else
			{
				iter.next();
			}
			count++;
		}
		}
		throw new NoSuchElementException();
	}

	@Override
	public int indexOf(E element) {
		InnerIterator iter=new InnerIterator();
		int index=0;
		while (iter.hasNext())
		{
			if (iter.next().equals(element))
			{
				return index;
			}
			index++;
		}
		return -1;
	}

	@Override
	public boolean isEmpty() 
	{
			return size==0;
	}

	@Override
	public Iterator<E> iterator() {
		return new InnerIterator();
	}

	@Override
	public ListIterator<E> listIterator() {
		throw new UnsupportedOperationException();
	}

	@Override
	public int size() {
		return size;
	}
	
	public String toStringReverse() {
		ListIterator<E> iter=new InnerListIterator();
		Link fLink = null;
		while(iter.hasNext())
		{
			fLink=(Link)(iter.next());
		}
		String retStr="";
		if (size>0)
		{
			retStr=retStr+"\n"+fLink.ref;
			while (iter.hasPrevious())
			{
				Link cLink=(Link)(iter.previous());
				retStr=retStr+"\n"+cLink.ref;
			}
		}
		return retStr;
	}

	public void deleteOdd ()
	{
		 InnerListIterator iter = new InnerListIterator();
		 Element temp=null;
		 if (size>1)
		 {
			 iter.next();
			 while (iter.hasNext())
			 {
				temp=iter.getCurrent();
				iter.next();
				if (iter.hasNext())
				{
					 iter.next(); 
				}
				else 
				{
					temp.setNext(null);
					break;
				}
				iter.getCurrent().setPrev(temp);
				temp.setNext(iter.getCurrent());
			 }
			 size-=(int)(size/2);
		 }
	}
	
	public void add(TwoWayLinkedListWithHead<E> other) 
	{
        if(!other.isEmpty())
        {
            if(isEmpty()) 
            { 
                this.head.setNext(other.head.getNext());
                other.head.setPrev(this.head);
                this.size+=other.size;
                other.clear();
            }
            else
            {
                Element First = other.head.getNext();
                Element Last = this.head.getPrev();
                Last.setNext(First);
                First.setPrev(Last);
                this.size+=other.size;
                other.clear();
            }
        }
	}
}


class Link{
	public String ref;
	// in the future there will be more fields
	public Link(String ref) 
	{
		this.ref=ref;
	}
	
	public String getRef ()
	{
		return ref;
	}
	@Override
	public boolean equals(Object obj) 
	{
		if (!(obj instanceof Link))
		 {
			 return false; 
		 }
		 else
		 {
			Link temp=(Link)obj;
			return temp.ref.equals(this.ref);
		 }
	}
}

class Document{
	public String name;
	public TwoWayLinkedListWithHead<Link> link=new TwoWayLinkedListWithHead<Link>();
	public Document(String name, Scanner scan) 
	{
		this.name=name;
		load(scan);
	}
	public void load(Scanner scan) 
	{
		String line;
		do
		{
			line=scan.nextLine ();
			String word[]=line.split(" ");
			int num=word.length;
			for (int x=0;x<num;x++)
			{
				String clink[]=word[x].split("=");
				if (clink[0].equalsIgnoreCase("link")&& clink.length==2)
				{
					if (correctLink(clink[1]))
					{
						Link temp=new Link (clink[1].toLowerCase());
						link.add(temp);
					}
				}
			}
		}while (!line.equals("eod"));
	}
	// accepted only small letters, capitalic letter, digits nad '_' (but not on the begin)
	private static boolean correctLink(String link) {
		if (Character.isLetter(link.charAt(0)))
		{
			if (link.matches("\\w+"))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}
	
	@Override
	public String toString() {
		String output="Document: ";
		String cLink;
		output=output+name;
		for (int x=0; x<link.size();x++)
		{
			cLink=link.get(x).ref;
			output=output+"\n"+cLink;
		}
		return output;
	}
	
	public String toStringReverse() 
	{
		String retStr="Document: "+name;
		return retStr+link.toStringReverse();
	}

}

public class Main {

	static Scanner scan; // for input stream

	public static void main(String[] args) {
		System.out.println("START");
		scan=new Scanner(System.in);
		Document[] doc=null;
		int currentDocNo=0;
		int maxNo=-1;
		boolean halt=false;
		while(!halt) {
			String line=scan.nextLine();
			// empty line and comment line - read next line
			if(line.length()==0 || line.charAt(0)=='#')
				continue;
			// copy line to output (it is easier to find a place of a mistake)
			System.out.println("!"+line);
			String word[]=line.split(" ");
			// go n - start with array of the length n
			if(word[0].equalsIgnoreCase("go") && word.length==2) {
				maxNo=Integer.parseInt(word[1]);
				doc = new Document[maxNo];
				continue;
			}
			//ch - change index
			if(word[0].equalsIgnoreCase("ch") && word.length==2) {
				currentDocNo=Integer.parseInt(word[1]);
				continue;
			}

			// ld documentName
			if(word[0].equalsIgnoreCase("ld") && word.length==2) {
				doc[currentDocNo]=new Document(word[1],scan);
				continue;
			}
			// ha
			if(word[0].equalsIgnoreCase("ha") && word.length==1) {
				halt=true;
				continue;
			}
			// clear
			if(word[0].equalsIgnoreCase("clear") && word.length==1) {
				doc[currentDocNo].link.clear();
				continue;
			}
			// show
			if(word[0].equalsIgnoreCase("show") && word.length==1) {
				System.out.println(doc[currentDocNo].toString());
				continue;
			}
			// reverse
			if(word[0].equalsIgnoreCase("reverse") && word.length==1) {
				System.out.println(doc[currentDocNo].toStringReverse());
				continue;
			}	
			// size
			if(word[0].equalsIgnoreCase("size") && word.length==1) {
				System.out.println(doc[currentDocNo].link.size());
				continue;
			}			
			// add str
			if(word[0].equalsIgnoreCase("add") && word.length==2) {
				System.out.println(doc[currentDocNo].link.add(new Link(word[1])));
				continue;
			}			
			// addi index str
			if(word[0].equalsIgnoreCase("addi") && word.length==3) {
				int index=Integer.parseInt(word[1]);
				try {
					doc[currentDocNo].link.add(index, new Link(word[2]));
				}
				catch (NoSuchElementException e) {
					System.out.println("error");
				}
				continue;
			}			
			// get index
			if(word[0].equalsIgnoreCase("get") && word.length==2) {
				int index=Integer.parseInt(word[1]);
				try {
					Link l=doc[currentDocNo].link.get(index);
					System.out.println(l.ref);
				}
				catch(NoSuchElementException e) {
					System.out.println("error");
				}
				continue;
			}		
			if(word[0].equalsIgnoreCase("ro") && word.length==1) 
			{
				doc[currentDocNo].link.deleteOdd();
				continue;
			}
			// set index str
			if(word[0].equalsIgnoreCase("set") && word.length==3) {
				int index=Integer.parseInt(word[1]);
				try {
					Link l=doc[currentDocNo].link.set(index,new Link(word[2]));
					System.out.println(l.ref);
				}
				catch(NoSuchElementException e) {
					System.out.println("error");
				}
				continue;
			}			
			// index str
			if(word[0].equalsIgnoreCase("index") && word.length==2) {
				int index=doc[currentDocNo].link.indexOf(new Link(word[1]));
				System.out.println(index);
				continue;
			}	
			// remi index
			if(word[0].equalsIgnoreCase("remi") && word.length==2) {
				int index=Integer.parseInt(word[1]);
				try {
					Link l=doc[currentDocNo].link.remove(index);
					System.out.println(l.ref);
				}
				catch(NoSuchElementException e) {
					System.out.println("error");
				}
				continue;
			}	
			// rem str
			if(word[0].equalsIgnoreCase("rem") && word.length==2) {
				System.out.println(doc[currentDocNo].link.remove(new Link(word[1])));
				continue;
			}
			// addl <indexOfListArray>
			if(word[0].equalsIgnoreCase("addl") && word.length==2) {
				int number=Integer.parseInt(word[1]);
			    doc[currentDocNo].link.add(doc[number].link);
				continue;
			}				
			System.out.println("Wrong command");			
		}
		System.out.println("END OF EXECUTION");
		scan.close();
	}
}
